#!/bin/sh
#
#	$Id: Delay.in,v 1.2 2005/05/05 13:40:10 alan Exp $
#
#	This script is a test resource for introducing delay.
#
#	usage: $0  {start|stop|status|monitor|meta-data}
#
#	  OCF parameters are as below:
#		OCF_RESKEY_startdelay
#		OCF_RESKEY_stopdelay
#		OCF_RESKEY_mondelay
#
#	
#		OCF_RESKEY_startdelay defaults to 30 (seconds)
#		OCF_RESKEY_stopdelay defaults to $OCF_RESKEY_startdelay
#		OCF_RESKEY_mondelay defaults to $OCF_RESKEY_startdelay
#
#
#	This is really a test resource script.
#

#######################################################################
# Initialization:

. @hb_libdir@/ocf-shellfuncs

#######################################################################

VARLIB=@localstatedir@/lib/@HB_PKG@
VLFILE="$VARLIB/rsctmp/Delay-${OCF_RESOURCE_INSTANCE}"

usage() {
  cat <<-!
	usage: $0 {start|stop|status|monitor}
  	$Id: Delay.in,v 1.2 2005/05/05 13:40:10 alan Exp $
	!
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="Delay" version="0.9">
<version>1.0</version>

<longdesc lang="en">
This script is a test resource for introducing delay.
</longdesc>
<shortdesc lang="en">Delay resource agent</shortdesc>

<parameters>

<parameter name="startdelay" unique="0">
<longdesc lang="en">
How long in seconds to delay on start operation.
</longdesc>
<shortdesc lang="en">Start delay</shortdesc>
<content type="integer" default="30" />
</parameter>

<parameter name="stopdelay" unique="0">
<longdesc lang="en">
How long in seconds to delay on stop operation.
Defaults to "startdelay" if unspecified.
</longdesc>
<shortdesc lang="en">Stop delay</shortdesc>
<content type="integer" default="30" />
</parameter>

<parameter name="mondelay" unique="0">
<longdesc lang="en">
How long in seconds to delay on monitor operation.
Defaults to "startdelay" if unspecified.
</longdesc>
<shortdesc lang="en">Monitor delay</shortdesc>
<content type="integer" default="30" />
</parameter>
</parameters>

<actions>
<action name="start" timeout="30" />
<action name="stop" timeout="30" />
<action name="status" depth="0" timeout="30" interval="10" start-delay="30" />
<action name="monitor" depth="0" timeout="30" interval="10" start-delay="30" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

Delay_stat() {
    test -f "$VLFILE"
}

Delay_Status() {
  if
    Delay_stat
  then
    echo "Delay is running OK"
    return 0
  else
    echo "Delay is not operational"
    return $OCF_ERR_GENERIC
  fi
}

Delay_Monitor() {
  sleep $OCF_RESKEY_mondelay
  Delay_Status
}

Delay_Start() {
  if
    Delay_stat
  then
    echo "Delay already running."
    return $OCF_SUCCESS
  else
    touch "$VLFILE"
    rc=$?
    sleep $OCF_RESKEY_startdelay
    if
      [ $rc -ne 0 ]
    then
      return $OCF_ERR_PERM
    fi
    return $OCF_SUCCESS
  fi
}

Delay_Stop() {
  if
    Delay_stat
  then
    unlink "$VLFILE"
    rc=$?
    sleep $OCF_RESKEY_stopdelay
    if
      [ $rc -ne 0 ]
    then
      return $OCF_ERR_PERM
    fi
    return $OCF_SUCCESS
  else
    echo "Delay already stopped."
    return $OCF_SUCCESS
  fi
}

if
  ( [ $# -eq 0 ] || [ $# -gt 1 ] )
then
  usage
  exit $OCF_ERR_ARGS
fi

: ${OCF_RESKEY_startdelay=30}
: ${OCF_RESKEY_stopdelay=$OCF_RESKEY_startdelay}
: ${OCF_RESKEY_mondelay=$OCF_RESKEY_startdelay}

case $1 in
  meta-data)		meta_data
			exit $OCF_SUCCESS
			;;
  start)		Delay_Start
			;;
  stop)			Delay_Stop
			;;
  monitor)		Delay_Monitor
			;;
  status)		Delay_Status
			;;
  usage)		usage
			exit $OCF_SUCCESS
			;;
  *)			usage
			exit $OCF_ERR_UNIMPLEMENTED
			;;
esac
exit $?
