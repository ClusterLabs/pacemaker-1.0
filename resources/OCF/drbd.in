#!/bin/sh
#
#	$Id: drbd.in,v 1.9 2005/09/22 13:42:45 lars Exp $
#
#       OCF Resource Agent compliant drbd resource script.
#
# WARNING: This is proof of concept code and still has a lot of open
# TODOs.
#
# Copyright (c) 2004 - 2005 SUSE LINUX AG, Lars Marowsky-Brée
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#

# TODO: 
# - All calls to external commands should use the ocf_exec function
#   which should be implemented.

# OCF instance parameters
#	OCF_RESKEY_drbd_resource
#	OCF_RESKEY_drbdconf
#	OCF_RESKEY_clone_max
#	OCF_RESKEY_clone_node_max
#	OCF_RESKEY_master_max
#	OCF_RESKEY_master_node_max


#######################################################################
# Initialization:

if [ -n "$OCF_DEBUG_LIBRARY" ]; then
	. $OCF_DEBUG_LIBRARY
else
	. @hb_libdir@/ocf-shellfuncs
fi

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="drbd">
<version>1.1</version>
<parameters>
<parameter name="drbd_resource" unique="1">
<longdesc lang="en">
The name of the drbd resource from the drbd.conf file.
</longdesc>
<shortdesc lang="en">drbd resource name</shortdesc>
<content type="string" default="drbd0" />
</parameter>

<parameter name="drbdconf">
<longdesc lang="en">
Full path to the drbd.conf file.
</longdesc>
<shortdesc lang="en">Path to drbd.conf</shortdesc>
<content type="string" default="/etc/drbd.conf"/>
</parameter>


<parameter name="clone_max">
<longdesc lang="en">
Number of clones of this drbd resource. Do not fiddle with the default.
</longdesc>
<shortdesc lang="en">Number of clones</shortdesc>
<content type="integer" default="2"/>
</parameter>

<parameter name="clone_node_max">
<longdesc lang="en">
Clones per node. Do not fiddle with the default.
</longdesc>
<shortdesc lang="en">Number of nodes</shortdesc>
<content type="integer" default="1"/>
</parameter>

<parameter name="master_max">
<longdesc lang="en">
Maximum number of active primaries. Do not fiddle with the default.
</longdesc>
<shortdesc lang="en">Number of primaries</shortdesc>
<content type="integer" default="1"/>
</parameter>

<parameter name="master_node_max">
<longdesc lang="en">
Maximum number of primaries per node. Do not fiddle with the default.
</longdesc>
<shortdesc lang="en">Number of primaries per node</shortdesc>
<content type="integer" default="1"/>
</parameter>
</parameters>

<actions>
<action name="start"   timeout="240" />
<action name="promote"   timeout="90" />
<action name="demote"   timeout="90" />
<action name="notify"   timeout="90" />
<action name="stop"    timeout="100" />
<action name="monitor" depth="0"  timeout="20" interval="20" start-delay="1m" role="Slave" />
<action name="monitor" depth="0"  timeout="20" interval="10" start-delay="1m" role="Master" />
<action name="meta-data"  timeout="5" />
<action name="validate-all"  timeout="30" />
</actions>
</resource-agent>
END

	exit $OCF_SUCCESS
}

do_drbdadm() {
	local cmd="$DRBDADM -c $DRBDCONF $*"
	local ret=0
	ocf_log debug "$RESOURCE: Calling $cmd"
	$cmd
	ret=$?
	ocf_log debug "$RESOURCE: Exit code $ret"
	return $ret
}

drbd_init() {
	DRBDADM=$(which drbdadm 2>/dev/null)
	CRM_MASTER=@hb_libdir@/crm_master
	
	if [ -z "$DRBDADM" -o ! -x "$DRBDADM" ]; then
		ocf_log err "drbdadm not installed."
		exit $OCF_ERR_INSTALLED
	fi
	
	RESOURCE="$OCF_RESKEY_drbd_resource"
	CLONE_NO="$OCF_RESKEY_clone"
	DRBDCONF="${OCF_RESKEY_drbdconf:=/etc/drbd.conf}"
	
	if [ ! -f "$DRBDCONF" ]; then
		ocf_log err "drbd.conf not installed."
		exit $OCF_ERR_CONFIGURED
	fi

	if [ -z "$CLONE_NO" ]; then
		ocf_log err "Resource not running as a clone."
		exit $OCF_ERR_CONFIGURED
	fi
}


#######################################################################

drbd_usage() {
	cat <<END
usage: $0 {start|stop|monitor|validate-all|promote|demote|notify|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

is_drbd_enabled () {
	if [ -f /proc/drbd ]; then
	    if cut -d" " -f2 </proc/devices | grep -q ^drbd$ ; then
		return 0
	    fi
	fi
	return 1
}


drbd_get_status() {
	DRBD_STATE=$(do_drbdadm state $RESOURCE)
	DRBD_STATE_LOCAL=$(echo $DRBD_STATE | sed -e 's#/.*##')
	DRBD_STATE_REMOTE=$(echo $DRBD_STATE | sed -e 's#.*/##')
	DRBD_CSTATE=$(do_drbdadm cstate $RESOURCE)
	ocf_log debug "$RESOURCE status: $DRBD_STATE $DRBD_STATE_LOCAL $DRBD_STATE_REMOTE $DRBD_CSTATE"
	# SyncSource|PausedSyncS|WFBitMapS|SkippedSyncS)
	# Diskless|Inconsistent)
	# SyncTarget)
	# Connected)
	# WFConnection)
	# StandAlone)
}

drbd_start() {
	if is_drbd_enabled; then
	    : OK
	else
	    modprobe -s drbd `$DRBDADM sh-mod-parms` || { 
		    ocf_log err "Can not load the drbd module."$'\n'; 
		    exit $OCF_ERR_GENERIC 
	    }
	    ocf_log debug "$RESOURCE start: Module loaded."
	fi

	drbd_get_status

	if [ "$DRBD_STATE_LOCAL" != "Not configured" ]; then
		ocf_log debug "$RESOURCE start: already configured."
		return $OCF_SUCCESS
	fi

	if do_drbdadm up $RESOURCE ; then
		ocf_log debug "$RESOURCE start: succeeded."
		return $OCF_SUCCESS
	else
		ocf_log err "$RESOURCE: Failed to start up."
		return $OCF_ERR_GENERIC
	fi
	
	do_drbdadm wait_connect $RESOURCE
	
	drbd_get_status

	# TODO: This is probably way too complex.
	case $DRBD_CSTATE in
	Connected) 
		$CRM_MASTER -v 75
		;;
	SyncSource|PausedSyncS|WFBitMapS|SkippedSyncS)
		$CRM_MASTER -v 100
		;;
        # TODO:
        # (Inconsistent || Diskless && WFConnection) should be -infinity
	# This one implies we'll try to promote even on disconnected
	# nodes, but that might not work.
	WFConnection) 
		$CRM_MASTER -v 10
		;;
	*)
		$CRM_MASTER -v 5
		;;
	esac

}

drbd_stop() {
	# TODO: this is a _force_ operation. we may need to kill higher
	# levels to be able to down drbd. figure out how...

	# Do not bother if drbd is not enabled
	if is_drbd_enabled; then
		if do_drbdadm down $RESOURCE ; then
			ocf_log debug "$RESOURCE stop: drbdadm down succeeded."
			return $OCF_SUCCESS
		else
			ocf_log err "$RESOURCE stop: Failed with exit code: $?"
			return $OCF_ERR_GENERIC
		fi
	else
		ocf_log debug "$RESOURCE stop: drbd not loaded."
	fi
}

drbd_monitor() {
	# TODO: Think about how to monitor drbd and what constitutes
	# failure cases...
	# diskless etc?
	# A secondary node which is supposed to be primary?
	if is_drbd_enabled; then
	    : OK
	else
	    ocf_log warn "$RESOURCE monitor: drbd module not loaded"
	    return $OCF_NOT_RUNNING
	fi

	drbd_get_status

	if [ "$DRBD_STATE_LOCAL" == "Not configured" ]; then
		ocf_log debug "$RESOURCE monitor: resource not configured"
		return $OCF_NOT_RUNNING
	fi
	
	if [ "$DRBD_STATE_LOCAL" != "Secondary" ] \
	&& [ "$DRBD_STATE_LOCAL" != "Primary" ]; then
		ocf_log err "$RESOURCE monitor: unexpected local state: $DRBD_STATE_LOCAL"
		return $OCF_ERR_GENERIC
	fi

	ROLE="$OCF_RESKEY_role"
	if [ -n "$ROLE" ] && [ "$DRBD_STATE_LOCAL" != "$ROLE" ]; then
		ocf_log err "$RESOURCE monitor: wrong state: expected $ROLE != $DRBD_STATE_LOCAL"
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

drbd_promote() {
	if is_drbd_enabled; then
	    : OK
	else
	    ocf_log err "drbd is not enabled"
	    return $OCF_ERR_GENERIC
	fi

	drbd_get_status

	if [ "x$DRBD_STATE_LOCAL" == "xPrimary" ]; then
		ocf_log debug "$RESOURCE promote: already primary"
		return $OCF_SUCCESS
	fi
	if [ "x$DRBD_STATE_LOCAL" != "xSecondary" ]; then
		ocf_log debug "$RESOURCE promote: Not secondary to start with"
		return $OCF_ERR_GENERIC
	fi
	if do_drbdadm primary $RESOURCE ; then
		ocf_log debug "$RESOURCE promote: primary succeeded"
		return $OCF_SUCCESS
	else
		ocf_log err "$RESOURCE promote: Failed with exit code $?."
		return $OCF_ERR_GENERIC
	fi
}

drbd_demote() {
	if is_drbd_enabled; then
	    : OK
	else
	    # A stopped resource also is demoted.
	    ocf_log debug "$RESOURCE demote: module not loaded"
	    return $OCF_SUCCESS
	fi
	# TODO: this is a _force_ operation. we may need to kill higher
	# levels (or switch them to r/o) to be able to demote drbd.
	# figure out how...
	
	if [ "x$DRBD_STATE_LOCAL" == "xSecondary" ]; then
	    ocf_log debug "$RESOURCE demote: already secondary"
		return $OCF_SUCCESS
	fi
	if do_drbdadm secondary $RESOURCE ; then
	        ocf_log debug "$RESOURCE demote: succeeded"
		return $OCF_SUCCESS
	else
	        ocf_log err "$RESOURCE demote: Failed with exit code $?."
		return $OCF_ERR_GENERIC
	fi
}

drbd_notify() {
	# TODO: Notification support not implemented yet
	if [ "x$notify_type" == "xpost" ]; then
		case $target_action in
		stop|fence)
			# On the primary, this would unblock waiting for
			# ACKs from the secondary.
			# On the secondary, this would un-taint the
			# local data and allow the node to be promoted
			# to primary.
			#
			if [ "$target_status" -eq 0 ]; then
				# TODO: This comamnd is also not
				# implemented in drbdadm yet ;-)
				do_drbdadm mark_peer_down $RESOURCE
			fi
			;;
		monitor)
			if [ "$target_status" -ne 0 ]; then
				: # TODO: Anything we should do about this?
			fi
		esac
	fi
	
	return $OCF_SUCCESS
}

drbd_validate_all () {
# First check the configuration file
	if [ -n "$DRBDCONF" ] && [ ! -f "$DRBDCONF" ]; then
	    ocf_log err "Configuration file does not exist: $DRBDCONF"
	    return $OCF_ERR_CONFIGURED
	fi

# Check the resource name, it should appear in DRBDCONF
	if [ -z $RESOURCE ]; then
	    ocf_log err "No resource name specified!"
	    return $OCF_ERR_ARGS
	fi
	
	if ! do_drbdadm dump $RESOURCE 2>/dev/null ; then
	    ocf_log err "Invalid configuration file $DRBDCONF"
	    return $OCF_ERR_CONFIGURED
	fi
	
	if [ "$OCF_RESKEY_clone_max" -ne 2 ] \
	 || [ "$OCF_RESKEY_clone_node_max" -ne 1 ] \
	 || [ "$OCF_RESKEY_master_node_max" -ne 1 ] \
	 || [ "$OCF_RESKEY_master_max" -ne 1 ] ; then
		ocf_log err "Clone options misconfigured."
		exit $OCF_ERR_CONFIGURED
	fi
	
	return $OCF_SUCCESS
}


if [ $# -ne 1 ]; then
	echo "Incorrect parameter count."
	drbd_usage
	exit $OCF_ERR_ARGS
fi

ACTION=$1
case $ACTION in
meta-data)	meta_data
		;;
validate-all)	drbd_init
		drbd_validate_all
		;;
start|stop|monitor|promote|demote|notify)
		if [ $UID -ne 0 ]; then
			ocf_log err "You must be root to perform this operation."
			exit $OCF_ERR_PERM
		fi
	
		drbd_init
		drbd_$ACTION
		exit $?
		;;
usage|help)	drbd_usage
		exit $OCF_SUCCESS
		;;
*)		drbd_usage
		exit $OCF_ERR_ARGS
		;;
esac

