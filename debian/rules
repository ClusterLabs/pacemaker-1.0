#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# Copyright 1997 to 1999 by Joey Hess.
# License: GNU General Public License (GPL)

#Thanks to Paolo Molaro <lupus@debian.org> and heartbeat_0.4.6-2.diff

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

LCRSO=$(shell if [ -d "/usr/lib/openais/lcrso" ]; then echo /usr/lib/openais/lcrso; else echo /usr/lib/lcrso; fi)

cfg:=--prefix=/usr --libdir=/usr/lib --sysconfdir=/etc --localstatedir=/var 	  \
  --mandir=/usr/share/man --with-lcrso-dir=$(LCRSO) \
  --disable-fatal-warnings

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

CFLAGS = -Wall -g
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
       CFLAGS += -O0
else
       CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
       INSTALL_PROGRAM += -s
endif

PWD:=`pwd`
DTMP:=`pwd`/debian/tmp
RELEASE := $(shell dpkg-parsechangelog | awk '/^Version: / { print $$2 }')
UPSTREAM := $(shell echo "$(RELEASE)" | sed 's/:\?\([0-9\.]\+\)-[0-9].*/\1/')

patch:
	override_version=$(RELEASE) sh debian/apply

unpatch:
	override_version=$(RELEASE) sh debian/apply $(UPSTREAM)


build: checkbuild build-stamp
build-stamp:
	dh_testdir
	# Allow debian packages to also be built directly from Hg archives
	# Official debian packages are built from dist tarballs
	test -e ./configure || ./autogen.sh $(cfg)
	test ! -e ./configure || ./configure $(cfg)
	$(MAKE)
	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	dh_clean
	rm -f build-stamp install-stamp
	rm -f debian/heartbeat.init debian/ldirectord.init \
		debian/ldirectord.default

	# Add here commands to clean up after the build process.
	-$(MAKE) clean
	-$(MAKE) distclean
	rm -f tools/ccdv
	-find . -name '*.py[co]' | xargs rm -f

	# Zero autoconf foo
	rm -f config.status libltdl/config.log libltdl/config.status 


install: build install-stamp
install-stamp:
	dh_testdir
	dh_testroot
	dh_clean -k

	$(MAKE) install DESTDIR=$(DTMP) docdir=/usr/share/doc/pacemaker

	# rename files
	-mkdir -p $(DTMP)/usr/share/doc/pacemaker/
	mv $(DTMP)/usr/share/pacemaker/cts/README \
		$(DTMP)/usr/share/doc/pacemaker/README.cts

	# cleanup unrequired stuff
	find $(DTMP)/usr/lib -name *.la -exec rm {} \;
	-rm $(DTMP)/usr/lib/service_crm.so
	-rm $(DTMP)/usr/lib/service_crm.a

#	# missing file...
#	-mkdir -p $(DTMP)/usr/share/doc/ldirectord/
#	install -c -m 644 ldirectord/ldirectord.cf \
#	  $(DTMP)/usr/share/doc/ldirectord/

	dh_installdirs
	dh_install --source=$(DTMP) --list-missing

#	hack around stupid LCRSO dirs

	install -d $(PWD)/debian/pacemaker/$(LCRSO)
	test ! -e $(DTMP)/$(LCRSO)/pacemaker.lcrso ||  		\
		install -m0644 $(DTMP)/$(LCRSO)/pacemaker.lcrso \
			$(PWD)/debian/pacemaker/$(LCRSO)/pacemaker.lcrso

binary-indep: build install
	dh_testdir -i
	dh_testroot -i
	dh_installinit -i -u 'defaults 20 32'
	dh_installchangelogs -i
	dh_strip -i
	dh_compress -i
	dh_fixperms -i
	dh_makeshlibs -i -V
	dh_installdeb -i
	dh_perl -i
	dh_pycentral -i
	dh_python -i `pwd`/usr/lib/pacemaker/cts `pwd`/usr/lib/pacemaker
	dh_shlibdeps -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

binary-arch: build install
	dh_testdir -a
	dh_testroot -a
	dh_installinit -a -u 'defaults 20 32'
#	dh_installchangelogs -a `pwd`/doc/ChangeLog
	dh_installchangelogs -i
	dh_strip -a
	dh_compress -a
	dh_fixperms -a
	dh_makeshlibs -a -V
	dh_installdeb -a
	dh_perl -a
	dh_pycentral -a
	dh_python -a `pwd`/usr/lib/pacemaker/cts `pwd`/usr/lib/pacemaker
	dh_shlibdeps -a 
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

binary: binary-indep binary-arch

checkbuild:
	chmod u+x ./debian/dpkg-checkbuild
	./debian/dpkg-checkbuild debian/control

.PHONY: build clean binary binary-indep binary-arch install checkbuild \
	patch unpatch
