#!/bin/bash
#
# Copyright (C) 2004 Andrew Beekhof <andrew@beekhof.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

testdir=@libdir@/heartbeat/crmtest
. ${testdir}/helper.sh || exit 1

CRM_ERR_SHUTDOWN=0
test_nodes=2

while [ $iteration -lt $repeats ]; do
    iteration=`expr $iteration + 1`
    echo -ne "\033]0;$test_type : Iteration $iteration of $repeats\007"
    echo "########### Begining iteration $iteration of $repeats ###########"
(
# make *sure* theres nothing left over from last time
crm-cleanup

#----

do_cmd echo "wait for HA to start on ${test_node_1}"
crm_log_pos=$(stat -L -c %s $logfile)
do_cmd remote_cmd $INIT_USER $test_node_1 $HALIB_DIR/heartbeat -M "2>&1 >/dev/null" &
do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search -a -m 500 \
    -s "${test_node_1} ccm(.*): info: Hostname: ${test_node_1}" \
    -s "${test_node_1} heartbeat(.*) info: Starting(.*)lrmd" \
    -e "${test_node_1} heartbeat(.*)Client(.*) respawning too fast"
cts_assert "Startup of Heartbeat on ${test_node_1} failed."

#----

do_cmd echo "wait for CRMd to start on ${test_node_1}"
crm_log_pos=$(stat -L -c %s $logfile)
do_cmd remote_cmd $CRMD_USER $test_node_1 $HALIB_DIR/crmd "$CRM_OPTS" "2>&1 >/dev/null" &
do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search  -a -m 1500 \
    -s "${test_node_1} crmd(.*): info:(.*)FSA Hostname: ${test_node_1}" \
    -s "crmd(.*) State transition (.*) \-> \"S_IDLE\""
cts_assert "CRMd startup on ${test_node_1} failed."

do_cmd wait_for_state S_IDLE 3 $test_node_1 
cts_assert "S_IDLE not reached on $test_node_1 (startup)!"

#----

sleep 30

#----

do_cmd echo Various sanity checks - stage 1
do_cmd wait_for_state S_IDLE 3 $test_node_1 
cts_assert "S_IDLE not reached on $test_node_1 (CIB create)!"

do_cmd is_running rsc1 $test_node_1
cts_assert_false "rsc1 IS running"

do_cmd is_running rsc2 $test_node_1
cts_assert_false "rsc2 IS running"

do_cmd is_dc $test_node_1
cts_assert "$test_node_1 is supposed to be the DC"

#----

do_cmd echo "wait for HA to start on $test_node_2"
crm_log_pos=$(stat -L -c %s $logfile)
do_cmd remote_cmd $INIT_USER $test_node_2 $HALIB_DIR/heartbeat -M "2>&1 >/dev/null" &
do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search -a -m 1500 \
    -s "${test_node_2} ccm(.*) Hostname: ${test_node_2}" \
    -s "${test_node_2} heartbeat(.*): info: Starting (.*)lrmd" \
    -e "${test_node_2} heartbeat(.*) Client (.*) respawning too fast"
cts_assert "Startup of Heartbeat on ${test_node_2} failed."

#----

do_cmd echo "wait for CRMd to start on $test_node_2"
crm_log_pos=$(stat -L -c %s $logfile)
do_cmd remote_cmd $CRMD_USER $test_node_2 $HALIB_DIR/crmd  "$CRM_OPTS" "2>&1 >/dev/null" &
do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search -a -m 2500 \
    -s "${test_node_2} crmd(.*)FSA Hostname: ${test_node_2}" \
    -s "${test_node_1} crmd(.*) State transition(.*) \-> \"S_IDLE\"" \
    -s "${test_node_2} crmd(.*) State transition \"S_PENDING\" \-> \"S_NOT_DC\"" 
cts_assert "CRMd startup on ${test_node_2} failed."

#----

do_cmd echo Various sanity checks - stage 2
do_cmd wait_for_state S_IDLE 3 $test_node_1 
cts_assert "S_IDLE not reached on $test_node_1 (CIB create)!"

do_cmd is_running rsc1 $test_node_1
cts_assert_false "rsc1 IS running"

do_cmd is_running rsc2 $test_node_1
cts_assert_false "rsc2 IS running"

do_cmd is_dc $test_node_1
cts_assert "$test_node_1 is supposed to be the DC"

#----

do_cmd echo Shutdown $test_node_1
crm_log_pos=$(stat -L -c %s $logfile)
do_cmd remote_cmd $CRMD_USER $test_node_1 $HALIB_DIR/crmadmin -K $test_node_1 &
do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search -a -m 5000 \
    -s "${test_node_2} crmd(.*) State transition (.*) \-> \"S_ELECTION\"" \
    -s "${test_node_1} crmd(.*) State transition (.*) \-> \"S_NOT_DC\""
cts_assert "Transition of the DC from ${test_node_1} to ${test_node_2} failed."

do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search -a -m 5000 \
    -s "${test_node_1} crmd(.*)State transition \"S_NOT_DC\" \-> \"S_STOPPING\"" \
    -s "crmd(.*)State transition" \
    -e "${test_node_1} crmd(.*)Timer I_TERMINATE just popped" \
    -s "${test_node_1} crmd(.*)\[crmd\] stopped" 
cts_assert "Shutdown of ${test_node_1} failed"

#----

do_cmd echo Various sanity checks - stage 3
do_cmd wait_for_state S_IDLE 60 $test_node_2
cts_assert "S_IDLE not reached on $test_node_2 after shutdown!"

do_cmd is_running rsc1 $test_node_1
cts_assert_false "rsc1 IS running"

do_cmd is_running rsc2 $test_node_1
cts_assert_false "rsc2 IS running"

do_cmd is_dc $test_node_2
cts_assert "$test_node_2 is supposed to be the DC"

#----

do_cmd echo Shutdown $test_node_2
crm_log_pos=$(stat -L -c %s $logfile)
do_cmd remote_cmd $CRMD_USER $test_node_2 $HALIB_DIR/crmadmin -K $test_node_2
do_cmd ${testdir}/testutils.pl -p $crm_log_pos -l ${logfile} --search -a -m 5000 \
    -s "${test_node_2} crmd(.*)State transition (.*) \-> \"S_PENDING\"" \
    -s "${test_node_2} crmd(.*)State transition \"S_PENDING\" \-> \"S_STOPPING\""\
    -s "${test_node_2} crmd(.*)\[crmd\] stopped" 
cts_assert "Shutdown of ${test_node_2} failed."

#----
do_cmd remote_cmd $CRMD_USER $test_node_1 "ls -al /var/lib/heartbeat/cores/*/core"
cts_assert_false "Core file(s) found on $test_node_1"

do_cmd remote_cmd $CRMD_USER $test_node_2 "ls -al /var/lib/heartbeat/cores/*/core"
cts_assert_false "Core file(s) found on $test_node_2"

do_cmd remote_cmd $CRMD_USER $test_node_2 killall -9 crmd

echo "test: PASSED"
)
done
