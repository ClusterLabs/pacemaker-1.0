  <chapter id="ch-advanced-options"><title>Advanced Configuration</title>
    <section id="s-remote-connection">
      <title>Connecting to the Cluster Configuration from a Remote Machine</title>
      <para>
	Provided Pacemaker is installed on a machine, it is possible to connect to the cluster even if the machine itself is not a part of it.
	To do this, one simply sets up a number of environment variables and runs the same commands as you would when working on a cluster node.
      </para>
      <table frame="all">
	<title>Environment Variables Used to Connect to Remote Instances of the CIB </title>
	<tgroup cols="2">
          <thead>
            <row>
              <entry>Environment Variable</entry>
              <entry>Description</entry>
            </row>
          </thead><tbody><row>
              <entry>CIB_user</entry>
              <entry>The user to connect as. Needs to be part of the hacluster group on the target host. Defaults to <emphasis>$USER</emphasis>
		</entry>
            </row>
            <row>
              <entry>CIB_passwd</entry>
              <entry>The user's password. Read from the command line if unset</entry>
            </row>
            <row>
              <entry>CIB_server</entry>
              <entry>The host to contact. Defaults to <emphasis>localhost</emphasis>.</entry>
            </row>
            <row>
              <entry>CIB_port</entry>
              <entry>The port on which to contact the server. Required.</entry>
            </row>
            <row>
              <entry>CIB_encrypted</entry>
              <entry>Encrypt network traffic. Defaults to <emphasis>true</emphasis>.</entry>
            </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	So if c001n01 is an active cluster node and is listening on 1234 for connections, and someguy is a member of the hacluster group.
	Then the following would prompt for someguy's password and return the cluster's current configuration:
      </para>
      <programlisting>
	<userinput>
  export CIB_port=1234; export CIB_server=c001n01; export CIB_user=someguy;
  cibadmin -Q
	</userinput>
      </programlisting>
      <para>
	For security reasons, the cluster does not listen remote connections by default.
	If you wish to allow remote access, you need to set the <literal>remote-tls-port</literal> (encrypted) or <literal>remote-clear-port</literal> (unencrypted) top-level options (ie. those kept in the cib tag , like <literal>num_updates</literal> and <literal>epoch</literal>).
      </para>
      <table frame="all">
	<title>Extra top-level CIB options for remote access </title>
	<tgroup cols="2">
          <thead>
            <row>
              <entry>Field</entry>
              <entry>Description</entry>
            </row>
          </thead><tbody><row>
              <entry>remote-tls-port</entry>
              <entry>Listen for encrypted remote connections on this port. Default: <emphasis>none</emphasis></entry>
            </row>
            <row>
              <entry>remote-clear-port</entry>
              <entry>Listen for plaintext remote connections on this port. Default: <emphasis>none</emphasis></entry>
            </row>
	  </tbody>
	</tgroup>
      </table>
    </section>
    <section id="s-recurring-start">
      <title>Specifying When Recurring Actions are Performed</title>
      <para>
	By default, recurring actions are scheduled relative to when the resource started.
	So if your resource was last started at 14:32 and you have a backup set to be performed every 24 hours, then the backup will always run at in the middle of the business day - hardly desirable.
      </para>
      <para>
	To specify a date/time that the operation should be relative to, set the operation's <literal>interval-origin</literal>.
	The cluster uses this point to calculate the correct <literal>start-delay</literal> such that the operation will occur at origin + (interval * N).
      </para>
      <para>
	So if the operation's interval is 24h, it's interval-origin is set to 02:00 and it is currently 14:32, then the cluster would initiate the operation with a start delay of 11 hours and 28 minutes.
	If the resource is moved to another node before 2am, then the operation is of course cancelled.
      </para>
      <para>
	The value specified for interval and <literal>interval-origin</literal> can be any date/time conforming to the <ulink url="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 standard</ulink>.
	By way of example, to specify an operation that would run on the first Monday of 2009 and every Monday after that you would add: 
      </para>
      <example>
	<title>Specifying a Base for Recurring Action Intervals</title>
	<programlisting>
  &lt;op id="my-weekly-action" name="custom-action" interval="P7D" interval-origin="2009-W01-1"/>
	</programlisting>
      </example>
    </section>
    <section id="s-moving-resource">
      <title>Moving Resources</title>
      <section>
	<title>Manual Intervention</title>
	<para>There are primarily two occasions when you would want to move a resource from it's current location: when the whole node is under maintenance and when a single resource needs to be moved.</para>
	<para>
	  In the case where everything needs to move, since everything eventually comes down to a score, you could create constraints for every resource you have preventing it from running on that node.
	  While the configuration can seem convoluted at times, not even we would require this of administrators.
	</para>
	<para>
	  Instead one can set a special node attribute which tells the cluster "don't let anything run here".
	  There is even a helpful tool to help query and set it called <command>crm_standby</command>.
	  To check the standby status of the current machine, simply run:
	</para>
	<para><command>crm_standby --get-value</command></para>
	<para>
	  A value of true indicates that the node is NOT able to host any resources and a value of false indicates that it CAN.
	  You can also check the status of other nodes in the cluster by specifying the <parameter>--node-uname</parameter> option. Eg.
	</para>
	<para><command>crm_standby --get-value --node-uname sles-2</command></para>
	<para>To change the current node's standby status, use <parameter>--attr-value</parameter> instead of <parameter>--get-value</parameter>. Eg.</para>
	<para><command>crm_standby --attr-value</command></para>
	<para>Again, you can change another host's value by supplying a host name with <parameter>--node-uname</parameter>.</para>
	<para>
	  When only one resource is required to move, we do this by creating location constraints.
	  However once again we provide a user friendly shortcut as part of the <command>crm_resource</command> command which creates and modifies the extra constraints for you.
	  If Email was running on sles-1 and you wanted it moved to a specific location, the command would look something like:
	</para>
	<para><command>crm_resource -M -r Email -H sles-2</command></para>
	<para>Behind the scenes, the tool will create the following location constraint:</para>
	<informalexample>
	  <programlisting>
  &lt;rsc_location rsc="Email" node="sles-2" score="INFINITY"/>
	  </programlisting>
	</informalexample>
	<para>It is important to note that subsequent invocations of <command>crm_resource -M</command> are not cumulative. So if you ran:</para>
	<para><command>crm_resource -M -r Email -H sles-2</command></para>
	<para><command>crm_resource -M -r Email -H sles-3</command></para>
	<para>then it is as if you had never performed the first command.</para>
	<para>To allow the resource to move back again, use:</para>
	<para><command>crm_resource -U -r Email</command></para>
	<para>
	  Note the use of the word allow.
	  The resource can move back to its original location but, depending on resource stickiness, it may stay where it is.
	  To be absolutely certain that it moves back to sles-1, move it there before issuing the call to <command>crm_resource -U</command>: 
	</para>
	<para><command>crm_resource -M -r Email -H sles-1</command></para>
	<para><command>crm_resource -U -r Email</command></para>
	<para>Alternatively, if you only care that the resource should be moved from its current location, try </para>
	<para><command>crm_resource -M -r Email</command></para>
	<para>Which will instead create a negative constraint. Eg.</para>
	<para>&lt;rsc_location rsc="Email" node="sles-1" score="-INFINITY"/></para>
	<para>
	  This will achieve the desired effect but will also have long-term consequences.
	  As the tool will warn you, the creation of a <literal>-INFINITY</literal> constraint will prevent the resource from running on that node until <command>crm_resource -U</command> is used.
	  This includes the situation where every other cluster node is no longer available.
	</para>
	<para>
	  In some cases, such as when resource stickiness is set to <literal>INFINITY</literal>, it is possible that you will end up with the problem described in <xref linkend="node-score-equal"/>.
	  The tool can detect some of these cases and deals with them by also creating both a positive and negative constraint. Eg. 
	</para>
	<para>    Email prefers sles-1 with a score of <literal>-INFINITY</literal></para>
	<para>    Email prefers sles-2 with a score of <literal>INFINITY</literal></para>
	<para>which has the same long-term consequences as discussed earlier.</para>
      </section>
      <section id="s-failure-migration">
	<title>Moving Resources Due to Failure</title>
	<para>New in 1.0 is the concept of a migration threshold
	  <footnote>
            <para>
	      The naming of this option was unfortunate as it is easily confused with true migration, the process of moving a resource from one node to another without stopping it.
	      Xen virtual guests are the most common example of resources that can be migrated in this manner.
	    </para>
	  </footnote>.
	  Simply define <literal>migration-threshold=N</literal> for a resource and it will migrate to a new node after N failures.
	  There is no threshold defined by default.
	  To determine the resource's current failure status and limits, use <command>crm_mon --failcounts</command>
	</para>
	<para>
	  By default, once the threshold has been reached, node will no longer be allowed to run the failed resource until the administrator manually resets the resource's failcount using <command>crm_failcount</command> (after hopefully first fixing the failure's cause).
	  However it is possible to expire them by setting the resource's <literal>failure-timeout</literal> option.
	</para>
	<para>So a setting of <literal>migration-threshold=2</literal> and <literal>failure-timeout=60s</literal> would cause the resource to move to a new node after 2 failures and potentially allow it to move back (depending on the stickiness and constraint scores) after one minute.</para>
	<para>
	  There are two exceptions to the migration threshold concept and occur when a resource either fails to start or fails to stop.
	  Start failures cause the failcount to be set to <literal>INFINITY</literal> and thus always cause the resource to move immediately.
	</para>
	<para>
	  Stop failures are slightly different and crucial.
	  If a resource fails to stop and STONITH is enabled, then the cluster will fence the node in order to be able to start the resource elsewhere.
	  If STONITH is not enabled, then the cluster has no way to continue and will not try to start the resource elsewhere, but will try to stop it again after the failure timeout.
	</para>
	<important><para>Please read <xref linkend="s-rules-recheck"/> before enabling this option.</para></important>
      </section>
      <section>
	<title>Moving Resources Due to Connectivity Changes</title>
	<para>Setting up the cluster to move resources when external connectivity is lost, is a two-step process.</para>
	<section>
	  <title>Tell Pacemaker to monitor connectivity</title>
	  <para>
	    To do this, you need to add a ping resource to the cluster.
	    The ping resource uses the system utility of the same name to a test if list of machines (specified by DNS hostname or IPv4/ IPv6 address) are reachable and uses the results to maintain a node attribute normally called pingd.
	    <footnote>
              <para>The attribute name is customizable which allows multiple ping groups to be defined</para>
	  </footnote>
	  </para>
	  <note><para>Older versions of Heartbeat required users to add ping nodes to ha.cf - this is no longer required.</para></note>
	  <para/>
	  <important>
	    <para>
	      Older versions of Pacemaker used a custom binary called pingd for this functionality, this is now deprecated in favor of ping.
	      If your version of Pacemaker does not contain the ping agent, you can download the latest version from: <ulink url="http://hg.clusterlabs.org/pacemaker/stable-1.0/raw-file/tip/extra/resources/ping"/>
	    </para>
	  </important>
	  <para>
	    Normally the resource will run on all cluster nodes, which means that you'll need to create a clone.
	    A template for this can be found below along with a description of the most interesting parameters.
	  </para>
	  <table frame="all">
	    <title>Common Options for a 'ping' Resource</title>
	    <tgroup cols="2">
              <thead>
		<row>
		  <entry>Field</entry>
		  <entry>Description</entry>
		</row>
              </thead>
	      <tbody>
		<row>
		  <entry>dampen</entry>
		  <entry>The time to wait (dampening) for further changes occur. Use this to prevent a resource from bouncing around the cluster when cluster nodes notice the loss of connectivity at slightly different times. </entry>
		</row>
		<row>
		  <entry>multiplier</entry>
		  <entry>The number by which to multiply the number of connected ping nodes by. Useful when there are multiple ping nodes configured.</entry>
		</row>
		<row>
		  <entry>host_list</entry>
		  <entry>The machines to contact in order to determine the current connectivity status. Allowed values include resolvable DNS hostnames, IPv4 and IPv6 addresses.</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>
	  <example>
	    <title>An example ping cluster resource, checks node connectivity once every minute</title>
	    <programlisting>
<![CDATA[
  <clone id="Connected">
   <primitive id="ping" provider="pacemaker" class="ocf" type="ping">
    <instance_attributes id="ping-attrs">
      <nvpair id="pingd-dampen" name="dampen" value="5s"/>
      <nvpair id="pingd-multiplier" name="multiplier" value="1000"/>
      <nvpair id="pingd-hosts" name="host_list" value="my.gateway.com www.bigcorp.com"/>
    </instance_attributes>
    <operations>
      <op id="ping-monitor-60s" interval="60s" name="monitor"/>
    </operations>
   </primitive>
  </clone>
]]>
	    </programlisting>
	  </example>
	  <important>
	    <para>
	      You're only half done.
	      The next section deals with telling Pacemaker how to deal with the connectivity status that ocf:pacemaker:ping is recording.
	    </para>
	  </important>
	</section>
	<section>
	  <title>Tell Pacemaker how to interpret the connectivity data</title>
	  <para>NOTE: Before reading the following, please make sure you have read and understood <xref linkend="ch-rules"/> above.</para>
	  <para>
	    There are a number of ways to use the connectivity data provided by Heartbeat.
	    The most common setup is for people to have a single ping node and want to prevent the cluster from running a resource on any unconnected node.
	  </para>
	  <example>
	    <title>Don't run on unconnected nodes</title>
	    <programlisting>
<![CDATA[
  <rsc_location id="WebServer-no-connectivity" rsc="Webserver">
   <rule id="ping-exclude-rule" score="-INFINITY" >
    <expression id="ping-exclude" attribute="pingd" operation="not_defined"/>
   </rule>
  </rsc_location>
]]>
	    </programlisting>
	  </example>
	  <para>
	    A more complex setup is to have a number of ping nodes configured.
	    You can require the cluster to only run resources on nodes that can connect to all (or a minimum subset) of them
	  </para>
	  <example>
	    <title>Run only on nodes connected to 3 or more ping nodes (assumes <literal>multiplier</literal> is set to 1000)</title>
	    <programlisting>
<![CDATA[
  <rsc_location id="WebServer-connectivity" rsc="Webserver">
   <rule id="ping-prefer-rule" score="-INFINITY" >
    <expression id="ping-prefer" attribute="pingd" operation="lt" value="3000"/>
   </rule>
  </rsc_location> 
]]>
	    </programlisting>
	  </example>
	  <para>
	    or instead you can tell the cluster only to prefer nodes with the most connectivity.
	    Just be sure to set the multiplier to a value higher than that of <literal>resource-stickiness</literal> (and don't set either of them to <literal>INFINITY</literal>).
	  </para>
	  <example>
	    <title>Prefer the node with the most connected ping nodes</title>
	    <programlisting>
<![CDATA[
  <rsc_location id="WebServer-connectivity" rsc="Webserver">
   <rule id="ping-prefer-rule" score-attribute="pingd" >
    <expression id="ping-prefer" attribute="pingd" operation="defined"/>
   </rule>
  </rsc_location> 
]]>
	    </programlisting>
	  </example>
	  <para>
	    It is perhaps easier to think of this in terms of the simple constraints that the cluster translates it into.
	    For example, if sles-1 is connected to all 5 ping nodes but sles-2 is only connected to 2, then it would be as if you instead had the following constraints in your configuration:
	  </para>
	  <figure id="fig-pingd-constraint-expanded">
	    <title>How the cluster translates the pingd constraint </title>
	    <programlisting>
<![CDATA[
  <rsc_location id="ping-1" rsc="Webserver" node="sles-1" score="5000"/>
  <rsc_location id="ping-2" rsc="Webserver" node="sles-2" score="2000"/>
]]>
	    </programlisting>
	  </figure>
	  <para>The advantage being that you don't have to manually update them whenever your network connectivity changes.</para>
	  <para>
	    You can also combine the concepts above into something even more complex.
	    The example below shows how you can prefer the node with the most connected ping nodes provided they have connectivity to at least three (assuming multiplier is set to 1000).
	  </para>
	  <example>
	    <title>A more complex example of choosing a location based on connectivity </title>
	    <programlisting>
<![CDATA[
  <rsc_location id="WebServer-connectivity" rsc="Webserver">
   <rule id="ping-exclude-rule" score="-INFINITY" >
    <expression id="ping-exclude" attribute="pingd" operation="lt" value="3000"/>
   </rule>
   <rule id="ping-prefer-rule" score-attribute="pingd" >
    <expression id="ping-prefer" attribute="pingd" operation="defined"/>
   </rule>
  </rsc_location> 
]]>
	    </programlisting>
	  </example>
	</section>
      </section>
      <section>
	<title>Resource Migration</title>
	<para>
	  Some resources, such as Xen virtual guests, are able to move to another location without lose of state.
	  We call this resource migration and is different from the normal practice of stopping the resource on the first machine and starting it elsewhere.
	</para>
	<para>
	  Not all resources are able to migrate, see the Migration Checklist below, and those that can wont do so in all situations.
	  Conceptually there are two requirements from which the other prerequisites follow:
	</para>
	<itemizedlist>
	  <listitem><para>the resource must be active and healthy at the old location </para></listitem>
	  <listitem><para>everything required for the resource to run must be available on both the old and new locations</para></listitem>
	</itemizedlist>
	<para>The cluster is able to accommodate both push and pull migration models by requiring the resource agent to support two new actions: <literal>migrate_to</literal> (performed on the current location) and <literal>migrate_from</literal> (performed on the destination).</para>
	<para>
	  In push migration, the process on the current location transfers the to the new location where is it later activated.
	  In this scenario, most of the work would be done in the <literal>migrate_to</literal> action and, if anything, the activation would occur during <literal>migrate_from</literal>.
	</para>
	<para>Conversely for pull, the <literal>migrate_to</literal> action is practically empty and <literal>migrate_from</literal> does most of the work, extracting the relevant resource state from the old location and activating it.</para>
	<para>There is no wrong or right way to implement migration for your service, as long as it works.</para>
	<section>
	  <title>Migration Checklist</title>
	  <itemizedlist>
	    <listitem><para>The resource may not be a clone.</para></listitem>
	    <listitem><para>The resource must use an OCF style agent.</para></listitem>
	    <listitem><para>The resource must not be in a failed or degraded state.</para></listitem>
	    <listitem><para>The resource must not, directly or indirectly, depend on any primitive or group resources.</para></listitem>
	    <listitem><para>The resources must support two new actions: migrate_to and migrate_from and advertise them in its metadata.</para></listitem>
	    <listitem><para>The resource must have the allow-migrate meta-attribute set to true (not the default).</para></listitem>
	  </itemizedlist>
	  <para>
	    If the resource depends on a clone, and at the time the resource needs to be move, the clone has instances that are stopping and instances that are starting, then the resource will be moved in the traditional manner.
	    The Policy Engine is not yet able to model this situation correctly and so takes the safe (yet less optimal) path.
	  </para>
	</section>
      </section>
    </section>
    <section id="s-reusing-config-elements">
      <title>Reusing Rules, Options and Sets of Operations</title>
      <para>
	Sometimes a number of constraints need to use the same set of rules and resources need to set the same options an parameters.
	To simplify this situation, you can refer to an existing object using an <literal>id-ref</literal> instead of an id.
      </para>
      <para>So if for one resource you have</para>
      <programlisting>
<![CDATA[
  <rsc_location id="WebServer-connectivity" rsc="Webserver">
   <rule id="ping-prefer-rule" score-attribute="pingd" >
    <expression id="ping-prefer" attribute="pingd" operation="defined"/>
   </rule>
  </rsc_location>
]]>
      </programlisting>
      <para>Then instead of duplicating the rule for all your other resources, you can instead specify</para>
      <example>
	<title>Referencing rules from other constraints</title>
	<programlisting>
<![CDATA[
  <rsc_location id="WebDB-connectivity" rsc="WebDB">
      <rule id-ref="ping-prefer-rule"/>
  </rsc_location> 
]]>
	</programlisting>
      </example>
      <important>
	<para>
	  The cluster will insist that the <literal>rule</literal> exists somewhere.
	  Attempting to add a reference to a non-existing rule will cause a validation failure, as will attempting to remove a <literal>rule</literal> that is referenced elsewhere.
	</para>
      </important>
      <para>The same principle applies for <literal>meta_attributes</literal> and <literal>instance_attributes</literal> as illustrated in the example below</para>
      <example>
	<title>Referencing attributes, options and operations from other resources</title>
	<programlisting>
<![CDATA[
  <primitive id="mySpecialRsc" class="ocf" type="Special" provider="me">
   <instance_attributes id="mySpecialRsc-attrs" score="1" >
    <nvpair id="default-interface" name="interface" value="eth0"/>
    <nvpair id="default-port" name="port" value="9999"/>
   </instance_attributes>
   <meta_attributes id="mySpecialRsc-options">
    <nvpair id="failure-timeout" name="failure-timeout" value="5m"/>
    <nvpair id="migration-threshold" name="migration-threshold" value="1"/>
    <nvpair id="stickiness" name="resource-stickiness" value="0"/>
   </meta_attributes>
   <operations id="health-checks">
     <op id="health-check" name="monitor" interval="60s"/>
     <op id="health-check" name="monitor" interval="30min"/>
    </operations>
  </primitive>
  <primitive id="myOtherlRsc" class="ocf" type="Other" provider="me">
   <instance_attributes id-ref="mySpecialRsc-attrs"/>
   <meta_attributes id-ref="mySpecialRsc-options"/>
   <operations id-ref="health-checks"/>
  </primitive>
]]>
	</programlisting>
      </example>
      <para/>
    </section>
    <section id="s-reload">
      <title>Reloading Services After a Definition Change</title>
      <para>
	The cluster automatically detects changes to the definition of services it manages.
	However, the normal response is to stop the service (using the old definition) and start it again (with the new definition).
	This works well, but some services are smart and can be told to use a new set of options without restarting.
      </para>
      <para>
	To take advantage of this capability, your resource agent must:
	  <orderedlist>
	    <listitem>
	      <para>Accept the <literal>reload</literal> operation and perform any required actions.</para>
	      <para>The steps required here depend completely on your application</para>
	      <example>
		<title>The DRBD Agent's Control logic for Supporting the <literal>reload</literal> Operation</title>
		<programlisting>
<![CDATA[
  case $1 in
    start)
	drbd_start
	;;
    stop)
	drbd_stop
	;;
    reload)
	drbd_reload
	;;
    monitor)
	drbd_monitor
	;;
    *)	
	drbd_usage
	exit $OCF_ERR_UNIMPLEMENTED
	;;
  esac
  exit $?
]]>
		</programlisting>
	      </example>
	    </listitem>
	    <listitem>
	      <para>Advertise the <literal>reload</literal> operation in the <literal>actions</literal> section of its metadata</para>
	      <example>
		<title>The DRBD Agent Advertising Support for the <literal>reload</literal> Operation</title>
		<programlisting>
<![CDATA[
  <?xml version="1.0"?>
  <!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
  <resource-agent name="drbd">
    <version>1.1</version>
    
    <longdesc lang="en">
      Master/Slave OCF Resource Agent for DRBD
    </longdesc>
    
    <shortdesc lang="en">
      This resource agent manages a DRBD resource as a master/slave
      resource. DRBD is a shared-nothing replicated storage device.
    </shortdesc>
    
    <parameters>
      <parameter name="drbd_resource" unique="1" required="1">
        <longdesc lang="en">The name of the drbd resource from the drbd.conf file.</longdesc>
        <shortdesc lang="en">drbd resource name</shortdesc>
        <content type="string"/>
      </parameter>
      
      <parameter name="drbdconf" unique="0">
        <longdesc lang="en">Full path to the drbd.conf file.</longdesc>
        <shortdesc lang="en">Path to drbd.conf</shortdesc>
        <content type="string" default="${OCF_RESKEY_drbdconf_default}"/>
      </parameter>
      
    </parameters>
    
    <actions>
      <action name="start"   timeout="240" />
      <action name="reload"  timeout="240" />
      <action name="promote" timeout="90" />
      <action name="demote"  timeout="90" />
      <action name="notify"  timeout="90" />
      <action name="stop"    timeout="100" />
      <action name="meta-data"    timeout="5" />
      <action name="validate-all" timeout="30" />
    </actions>
  </resource-agent>
]]>
		</programlisting>
	      </example>	      
	    </listitem>
	    <listitem>
	      <para>Advertise one or more parameters that can take effect using <literal>reload</literal>.</para>
	      <para>Any parameter with the <literal>unique</literal> set to 0 is eligable to be used in this way.</para>
	      <example>
		<title>Parameter that can be changed using reload</title>
		<programlisting>
<![CDATA[
  <parameter name="drbdconf" unique="0">
    <longdesc lang="en">Full path to the drbd.conf file.</longdesc>
    <shortdesc lang="en">Path to drbd.conf</shortdesc>
    <content type="string" default="${OCF_RESKEY_drbdconf_default}"/>
  </parameter>
]]>
		</programlisting>
	      </example>
	    </listitem>
	  </orderedlist>
      </para>
      <para>
	Once these requirements are satisfied, the cluster will automatically know to reload, instead of restarting, the resource when a non-unique fields changes.
      </para>
      <note>
	<para>
	  The metadata is re-read when the resource is started.
	  This may mean that the resource will be restarted the first time, even though you changed a parameter with <literal>unique=0</literal> 
	</para>
      </note>
      <note>
	<para>
	  If both a unique and non-unique field is changed simultaneously, the resource will still be restarted. 
	</para>
      </note>
    </section>
  </chapter>
